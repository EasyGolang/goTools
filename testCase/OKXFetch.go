package testCase

import (
	"fmt"

	"github.com/EasyGolang/goTools/global"
	"github.com/EasyGolang/goTools/global/config"
	"github.com/EasyGolang/goTools/mBinance"
	"github.com/EasyGolang/goTools/mFile"
	"github.com/EasyGolang/goTools/mOKX"
	"github.com/EasyGolang/goTools/mTime"
	jsoniter "github.com/json-iterator/go"
)

// OKX 加密请求
type AutoGenerated struct {
	Code string `json:"code"`
	Data []struct {
		Ts string `json:"ts"`
	} `json:"data"`
	Msg string `json:"msg"`
}

func OKXFetch() {
	resData, err := mOKX.FetchOKX(mOKX.OptFetchOKX{
		Path:   "/api/v5/public/time",
		Method: "get",
		Event: func(s string, a any) {
			global.Log.Println("Event", s, a)
		},
	})
	if err != nil {
		fmt.Println(err)
		return
	}
	var result AutoGenerated

	jsoniter.Unmarshal(resData, &result)

	TimeStamp := result.Data[0].Ts
	fmt.Println(TimeStamp)
	fmt.Println(mTime.UnixFormat(TimeStamp))

	fmt.Println(mTime.UnixFormat(mTime.GetUnixInt64()))
}

func BalanceFetch() {
	resData, err := mBinance.FetchBinance(mBinance.OptFetchBinance{
		Path:   "/fapi/v2/account",
		Method: "get",
		BinanceKey: mBinance.TypeBinanceKey{
			ApiKey:    config.BinanceKey.ApiKey,
			SecretKey: config.BinanceKey.SecretKey,
		},
	})

	fmt.Println(err)

	mFile.Write(config.Dir.JsonData+"/BalanceFetch.json", string(resData))
}
